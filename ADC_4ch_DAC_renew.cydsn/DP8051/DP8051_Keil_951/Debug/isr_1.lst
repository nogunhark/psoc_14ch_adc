C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE ISR_1
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\isr_1.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\isr_1.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBUG) WL(2) P
                    -R(.\DP8051\DP8051_Keil_951\Debug/isr_1.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\isr_1.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: isr_1.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          
  19          #include <cydevice_trm.h>
  20          #include <CyLib.h>
  21          #include <isr_1.h>
  22          
  23          #if !defined(isr_1__REMOVED) /* Check for removal by optimization */
  24          
  25          /*******************************************************************************
  26          *  Place your includes, defines and code here 
  27          ********************************************************************************/
  28          /* `#START isr_1_intc` */
  29          
  30          /* `#END` */
  31          
  32          
  33          /*******************************************************************************
  34          * Function Name: isr_1_Start
  35          ********************************************************************************
  36          *
  37          * Summary:
  38          *  Set up the interrupt and enable it. This function disables the interrupt, 
  39          *  sets the default interrupt vector, sets the priority from the value in the
  40          *  Design Wide Resources Interrupt Editor, then enables the interrupt to the 
  41          *  interrupt controller.
  42          *
  43          * Parameters:  
  44          *   None
  45          *
  46          * Return:
  47          *   None
  48          *
  49          *******************************************************************************/
  50          void isr_1_Start(void) 
  51          {
  52   1          /* For all we know the interrupt is active. */
  53   1          isr_1_Disable();
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 2   

  54   1      
  55   1          /* Set the ISR to point to the isr_1 Interrupt. */
  56   1          isr_1_SetVector(&isr_1_Interrupt);
  57   1      
  58   1          /* Set the priority. */
  59   1          isr_1_SetPriority((uint8)isr_1_INTC_PRIOR_NUMBER);
  60   1      
  61   1          /* Enable it. */
  62   1          isr_1_Enable();
  63   1      }
  64          
  65          
  66          /*******************************************************************************
  67          * Function Name: isr_1_StartEx
  68          ********************************************************************************
  69          *
  70          * Summary:
  71          *  Sets up the interrupt and enables it. This function disables the interrupt,
  72          *  sets the interrupt vector based on the address passed in, sets the priority 
  73          *  from the value in the Design Wide Resources Interrupt Editor, then enables 
  74          *  the interrupt to the interrupt controller.
  75          *  
  76          *  When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
  77          *  used to provide consistent definition across compilers:
  78          *  
  79          *  Function definition example:
  80          *   CY_ISR(MyISR)
  81          *   {
  82          *   }
  83          *   Function prototype example:
  84          *   CY_ISR_PROTO(MyISR);
  85          *
  86          * Parameters:  
  87          *   address: Address of the ISR to set in the interrupt vector table.
  88          *
  89          * Return:
  90          *   None
  91          *
  92          *******************************************************************************/
  93          void isr_1_StartEx(cyisraddress address) 
  94          {
  95   1          /* For all we know the interrupt is active. */
  96   1          isr_1_Disable();
  97   1      
  98   1          /* Set the ISR to point to the isr_1 Interrupt. */
  99   1          isr_1_SetVector(address);
 100   1      
 101   1          /* Set the priority. */
 102   1          isr_1_SetPriority((uint8)isr_1_INTC_PRIOR_NUMBER);
 103   1      
 104   1          /* Enable it. */
 105   1          isr_1_Enable();
 106   1      }
 107          
 108          
 109          /*******************************************************************************
 110          * Function Name: isr_1_Stop
 111          ********************************************************************************
 112          *
 113          * Summary:
 114          *   Disables and removes the interrupt.
 115          *
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 3   

 116          * Parameters:  
 117          *   None
 118          *
 119          * Return:
 120          *   None
 121          *
 122          *******************************************************************************/
 123          void isr_1_Stop(void) 
 124          {
 125   1          /* Disable this interrupt. */
 126   1          isr_1_Disable();
 127   1      }
 128          
 129          
 130          /*******************************************************************************
 131          * Function Name: isr_1_Interrupt
 132          ********************************************************************************
 133          *
 134          * Summary:
 135          *   The default Interrupt Service Routine for isr_1.
 136          *
 137          *   Add custom code between the START and END comments to keep the next version
 138          *   of this file from over-writing your code.
 139          *
 140          *   Note You may use either the default ISR by using this API, or you may define
 141          *   your own separate ISR through ISR_StartEx().
 142          *
 143          * Parameters:  
 144          *   None
 145          *
 146          * Return:
 147          *   None
 148          *
 149          *******************************************************************************/
 150          CY_ISR(isr_1_Interrupt)
 151          {
 152   1          /*  Place your Interrupt code here. */
 153   1          /* `#START isr_1_Interrupt` */
 154   1      
 155   1          /* `#END` */
 156   1      
 157   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 158   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 159   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (isr_1__ES2_PATCH ))      
                          isr_1_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 162   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 163   1      }
 164          
 165          
 166          /*******************************************************************************
 167          * Function Name: isr_1_SetVector
 168          ********************************************************************************
 169          *
 170          * Summary:
 171          *   Change the ISR vector for the Interrupt. Note calling isr_1_Start
 172          *   will override any effect this method would have had. To set the vector 
 173          *   before the component has been started use isr_1_StartEx instead.
 174          * 
 175          *   When defining ISR functions, the CY_ISR and CY_ISR_PROTO macros should be 
 176          *   used to provide consistent definition across compilers:
 177          *
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 4   

 178          *   Function definition example:
 179          *   CY_ISR(MyISR)
 180          *   {
 181          *   }
 182          *
 183          *   Function prototype example:
 184          *     CY_ISR_PROTO(MyISR);
 185          *
 186          * Parameters:
 187          *   address: Address of the ISR to set in the interrupt vector table.
 188          *
 189          * Return:
 190          *   None
 191          *
 192          *******************************************************************************/
 193          void isr_1_SetVector(cyisraddress address) 
 194          {
 195   1          CY_SET_REG16(isr_1_INTC_VECTOR, (uint16) address);
 196   1      }
 197          
 198          
 199          /*******************************************************************************
 200          * Function Name: isr_1_GetVector
 201          ********************************************************************************
 202          *
 203          * Summary:
 204          *   Gets the "address" of the current ISR vector for the Interrupt.
 205          *
 206          * Parameters:
 207          *   None
 208          *
 209          * Return:
 210          *   Address of the ISR in the interrupt vector table.
 211          *
 212          *******************************************************************************/
 213          cyisraddress isr_1_GetVector(void) 
 214          {
 215   1          return (cyisraddress) CY_GET_REG16(isr_1_INTC_VECTOR);
 216   1      }
 217          
 218          
 219          /*******************************************************************************
 220          * Function Name: isr_1_SetPriority
 221          ********************************************************************************
 222          *
 223          * Summary:
 224          *   Sets the Priority of the Interrupt. 
 225          *
 226          *   Note calling isr_1_Start or isr_1_StartEx will 
 227          *   override any effect this API would have had. This API should only be called
 228          *   after isr_1_Start or isr_1_StartEx has been called. 
 229          *   To set the initial priority for the component, use the Design-Wide Resources
 230          *   Interrupt Editor.
 231          *
 232          *   Note This API has no effect on Non-maskable interrupt NMI).
 233          *
 234          * Parameters:
 235          *   priority: Priority of the interrupt, 0 being the highest priority
 236          *             PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 237          *             PSoC 4: Priority is from 0 to 3.
 238          *
 239          * Return:
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 5   

 240          *   None
 241          *
 242          *******************************************************************************/
 243          void isr_1_SetPriority(uint8 priority) 
 244          {
 245   1          *isr_1_INTC_PRIOR = priority << 5;
 246   1      }
 247          
 248          
 249          /*******************************************************************************
 250          * Function Name: isr_1_GetPriority
 251          ********************************************************************************
 252          *
 253          * Summary:
 254          *   Gets the Priority of the Interrupt.
 255          *
 256          * Parameters:
 257          *   None
 258          *
 259          * Return:
 260          *   Priority of the interrupt, 0 being the highest priority
 261          *    PSoC 3 and PSoC 5LP: Priority is from 0 to 7.
 262          *    PSoC 4: Priority is from 0 to 3.
 263          *
 264          *******************************************************************************/
 265          uint8 isr_1_GetPriority(void) 
 266          {
 267   1          uint8 priority;
 268   1      
 269   1      
 270   1          priority = *isr_1_INTC_PRIOR >> 5;
 271   1      
 272   1          return priority;
 273   1      }
 274          
 275          
 276          /*******************************************************************************
 277          * Function Name: isr_1_Enable
 278          ********************************************************************************
 279          *
 280          * Summary:
 281          *   Enables the interrupt to the interrupt controller. Do not call this function
 282          *   unless ISR_Start() has been called or the functionality of the ISR_Start() 
 283          *   function, which sets the vector and the priority, has been called.
 284          *
 285          * Parameters:
 286          *   None
 287          *
 288          * Return:
 289          *   None
 290          *
 291          *******************************************************************************/
 292          void isr_1_Enable(void) 
 293          {
 294   1          /* Enable the general interrupt. */
 295   1          *isr_1_INTC_SET_EN = isr_1__INTC_MASK;
 296   1      }
 297          
 298          
 299          /*******************************************************************************
 300          * Function Name: isr_1_GetState
 301          ********************************************************************************
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 6   

 302          *
 303          * Summary:
 304          *   Gets the state (enabled, disabled) of the Interrupt.
 305          *
 306          * Parameters:
 307          *   None
 308          *
 309          * Return:
 310          *   1 if enabled, 0 if disabled.
 311          *
 312          *******************************************************************************/
 313          uint8 isr_1_GetState(void) 
 314          {
 315   1          /* Get the state of the general interrupt. */
 316   1          return ((*isr_1_INTC_SET_EN & (uint8)isr_1__INTC_MASK) != 0u) ? 1u:0u;
 317   1      }
 318          
 319          
 320          /*******************************************************************************
 321          * Function Name: isr_1_Disable
 322          ********************************************************************************
 323          *
 324          * Summary:
 325          *   Disables the Interrupt in the interrupt controller.
 326          *
 327          * Parameters:
 328          *   None
 329          *
 330          * Return:
 331          *   None
 332          *
 333          *******************************************************************************/
 334          void isr_1_Disable(void) 
 335          {
 336   1          /* Disable the general interrupt. */
 337   1          *isr_1_INTC_CLR_EN = isr_1__INTC_MASK;
 338   1      }
 339          
 340          
 341          /*******************************************************************************
 342          * Function Name: isr_1_SetPending
 343          ********************************************************************************
 344          *
 345          * Summary:
 346          *   Causes the Interrupt to enter the pending state, a software method of
 347          *   generating the interrupt.
 348          *
 349          * Parameters:
 350          *   None
 351          *
 352          * Return:
 353          *   None
 354          *
 355          * Side Effects:
 356          *   If interrupts are enabled and the interrupt is set up properly, the ISR is
 357          *   entered (depending on the priority of this interrupt and other pending 
 358          *   interrupts).
 359          *
 360          *******************************************************************************/
 361          void isr_1_SetPending(void) 
 362          {
 363   1          *isr_1_INTC_SET_PD = isr_1__INTC_MASK;
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 7   

 364   1      }
 365          
 366          
 367          /*******************************************************************************
 368          * Function Name: isr_1_ClearPending
 369          ********************************************************************************
 370          *
 371          * Summary:
 372          *   Clears a pending interrupt in the interrupt controller.
 373          *
 374          *   Note Some interrupt sources are clear-on-read and require the block 
 375          *   interrupt/status register to be read/cleared with the appropriate block API 
 376          *   (GPIO, UART, and so on). Otherwise the ISR will continue to remain in 
 377          *   pending state even though the interrupt itself is cleared using this API.
 378          *
 379          * Parameters:
 380          *   None
 381          *
 382          * Return:
 383          *   None
 384          *
 385          *******************************************************************************/
 386          void isr_1_ClearPending(void) 
 387          {
 388   1          *isr_1_INTC_CLR_PD = isr_1__INTC_MASK;
 389   1      }
 390          
 391          #endif /* End check for removal by optimization */
 392          
 393          
 394          /* [] END OF FILE */
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION isr_1_Start (BEGIN)
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0000 120000      R     LCALL   isr_1_Disable
                                           ; SOURCE LINE # 56
0003 7E00        R     MOV     R6,#HIGH isr_1_Interrupt
0005 7F00        R     MOV     R7,#LOW isr_1_Interrupt
0007 120000      R     LCALL   _isr_1_SetVector
                                           ; SOURCE LINE # 59
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _isr_1_SetPriority
                                           ; SOURCE LINE # 62
000F 120000      R     LCALL   isr_1_Enable
                                           ; SOURCE LINE # 63
0012 22                RET     
             ; FUNCTION isr_1_Start (END)

             ; FUNCTION _isr_1_StartEx (BEGIN)
                                           ; SOURCE LINE # 93
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 96
0008 120000      R     LCALL   isr_1_Disable
                                           ; SOURCE LINE # 99
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _isr_1_SetVector
                                           ; SOURCE LINE # 102
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _isr_1_SetPriority
                                           ; SOURCE LINE # 105
001B 120000      R     LCALL   isr_1_Enable
                                           ; SOURCE LINE # 106
001E 22                RET     
             ; FUNCTION _isr_1_StartEx (END)

             ; FUNCTION isr_1_Stop (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
0000 120000      R     LCALL   isr_1_Disable
                                           ; SOURCE LINE # 127
0003 22                RET     
             ; FUNCTION isr_1_Stop (END)

             ; FUNCTION isr_1_Interrupt (BEGIN)
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 163
0000 32                RETI    
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 9   

             ; FUNCTION isr_1_Interrupt (END)

             ; FUNCTION _isr_1_SetVector (BEGIN)
                                           ; SOURCE LINE # 193
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7900              MOV     R1,#00H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 196
001D 22                RET     
             ; FUNCTION _isr_1_SetVector (END)

             ; FUNCTION isr_1_GetVector (BEGIN)
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7900              MOV     R1,#00H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 216
0009         ?C0006:
0009 22                RET     
             ; FUNCTION isr_1_GetVector (END)

             ; FUNCTION _isr_1_SetPriority (BEGIN)
                                           ; SOURCE LINE # 243
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904480            MOV     DPTR,#04480H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
0015 22                RET     
             ; FUNCTION _isr_1_SetPriority (END)
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 10  


             ; FUNCTION isr_1_GetPriority (BEGIN)
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 270
0000 904480            MOV     DPTR,#04480H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 273
0015         ?C0008:
0015 22                RET     
             ; FUNCTION isr_1_GetPriority (END)

             ; FUNCTION isr_1_Enable (BEGIN)
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 295
0000 9044C0            MOV     DPTR,#044C0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0006 22                RET     
             ; FUNCTION isr_1_Enable (END)

             ; FUNCTION isr_1_GetState (BEGIN)
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 316
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E004            JNB     ACC.0,?C0010
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0011
000D         ?C0010:
000D 7F00              MOV     R7,#00H
000F         ?C0011:
                                           ; SOURCE LINE # 317
000F         ?C0012:
000F 22                RET     
             ; FUNCTION isr_1_GetState (END)

             ; FUNCTION isr_1_Disable (BEGIN)
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 337
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   ISR_1                                                                 07/23/2015 11:21:34 PAGE 11  

                                           ; SOURCE LINE # 338
0006 22                RET     
             ; FUNCTION isr_1_Disable (END)

             ; FUNCTION isr_1_SetPending (BEGIN)
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
0000 9044D0            MOV     DPTR,#044D0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0006 22                RET     
             ; FUNCTION isr_1_SetPending (END)

             ; FUNCTION isr_1_ClearPending (BEGIN)
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
0000 9044D8            MOV     DPTR,#044D8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
0006 22                RET     
             ; FUNCTION isr_1_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    183    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
