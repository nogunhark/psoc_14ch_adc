C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Timer.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\Timer.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBUG) WL(2) P
                    -R(.\DP8051\DP8051_Keil_951\Debug/Timer.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\Timer.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Timer.c
   3          * Version 2.60
   4          *
   5          * Description:
   6          *  The Timer component consists of a 8, 16, 24 or 32-bit timer with
   7          *  a selectable period between 2 and 2^Width - 1.  The timer may free run
   8          *  or be used as a capture timer as well.  The capture can be initiated
   9          *  by a positive or negative edge signal as well as via software.
  10          *  A trigger input can be programmed to enable the timer on rising edge
  11          *  falling edge, either edge or continous run.
  12          *  Interrupts may be generated due to a terminal count condition
  13          *  or a capture event.
  14          *
  15          * Note:
  16          *
  17          ********************************************************************************
  18          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions,
  20          * disclaimers, and limitations in the end user license agreement accompanying
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "Timer.h"
  25          
  26          uint8 Timer_initVar = 0u;
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: Timer_Init
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  Initialize to the schematic state
  35          *
  36          * Parameters:
  37          *  void
  38          *
  39          * Return:
  40          *  void
  41          *
  42          *******************************************************************************/
  43          void Timer_Init(void) 
  44          {
  45   1          #if(!Timer_UsingFixedFunction)
                          /* Interrupt State Backup for Critical Region*/
                          uint8 Timer_interruptState;
                  #endif /* Interrupt state back up for Fixed Function only */
  49   1      
  50   1          #if (Timer_UsingFixedFunction)
  51   1              /* Clear all bits but the enable bit (if it's already set) for Timer operation */
  52   1              Timer_CONTROL &= Timer_CTRL_ENABLE;
  53   1      
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 2   

  54   1              /* Clear the mode bits for continuous run mode */
  55   1              #if (CY_PSOC5A)
                          Timer_CONTROL2 &= ((uint8)(~Timer_CTRL_MODE_MASK));
                      #endif /* Clear bits in CONTROL2 only in PSOC5A */
  58   1      
  59   1              #if (CY_PSOC3 || CY_PSOC5LP)
  60   1                  Timer_CONTROL3 &= ((uint8)(~Timer_CTRL_MODE_MASK));
  61   1              #endif /* CONTROL3 register exists only in PSoC3 OR PSoC5LP */
  62   1      
  63   1              /* Check if One Shot mode is enabled i.e. RunMode !=0*/
  64   1              #if (Timer_RunModeUsed != 0x0u)
                          /* Set 3rd bit of Control register to enable one shot mode */
                          Timer_CONTROL |= 0x04u;
                      #endif /* One Shot enabled only when RunModeUsed is not Continuous*/
  68   1      
  69   1              #if (Timer_RunModeUsed == 2)
                          #if (CY_PSOC5A)
                              /* Set last 2 bits of control2 register if one shot(halt on
                              interrupt) is enabled*/
                              Timer_CONTROL2 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Set last 2 bits of control3 register if one shot(halt on
                              interrupt) is enabled*/
                              Timer_CONTROL3 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL3 for PSoC3 or PSoC5LP */
              
                      #endif /* Remove section if One Shot Halt on Interrupt is not enabled */
  83   1      
  84   1              #if (Timer_UsingHWEnable != 0)
                          #if (CY_PSOC5A)
                              /* Set the default Run Mode of the Timer to Continuous */
                              Timer_CONTROL2 |= Timer_CTRL_MODE_PULSEWIDTH;
                          #endif /* Set Continuous Run Mode in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Clear and Set ROD and COD bits of CFG2 register */
                              Timer_CONTROL3 &= ((uint8)(~Timer_CTRL_RCOD_MASK));
                              Timer_CONTROL3 |= Timer_CTRL_RCOD;
              
                              /* Clear and Enable the HW enable bit in CFG2 register */
                              Timer_CONTROL3 &= ((uint8)(~Timer_CTRL_ENBL_MASK));
                              Timer_CONTROL3 |= Timer_CTRL_ENBL;
              
                              /* Set the default Run Mode of the Timer to Continuous */
                              Timer_CONTROL3 |= Timer_CTRL_MODE_CONTINUOUS;
                          #endif /* Set Continuous Run Mode in CONTROL3 for PSoC3ES3 or PSoC5A */
              
                      #endif /* Configure Run Mode with hardware enable */
 104   1      
 105   1              /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 106   1              Timer_RT1 &= ((uint8)(~Timer_RT1_MASK));
 107   1              Timer_RT1 |= Timer_SYNC;
 108   1      
 109   1              /*Enable DSI Sync all all inputs of the Timer*/
 110   1              Timer_RT1 &= ((uint8)(~Timer_SYNCDSI_MASK));
 111   1              Timer_RT1 |= Timer_SYNCDSI_EN;
 112   1      
 113   1              /* Set the IRQ to use the status register interrupts */
 114   1              Timer_CONTROL2 |= Timer_CTRL2_IRQ_SEL;
 115   1          #endif /* Configuring registers of fixed function implementation */
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 3   

 116   1      
 117   1          /* Set Initial values from Configuration */
 118   1          Timer_WritePeriod(Timer_INIT_PERIOD);
 119   1          Timer_WriteCounter(Timer_INIT_PERIOD);
 120   1      
 121   1          #if (Timer_UsingHWCaptureCounter)/* Capture counter is enabled */
                      Timer_CAPTURE_COUNT_CTRL |= Timer_CNTR_ENABLE;
                      Timer_SetCaptureCount(Timer_INIT_CAPTURE_COUNT);
                  #endif /* Configure capture counter value */
 125   1      
 126   1          #if (!Timer_UsingFixedFunction)
                      #if (Timer_SoftwareCaptureMode)
                          Timer_SetCaptureMode(Timer_INIT_CAPTURE_MODE);
                      #endif /* Set Capture Mode for UDB implementation if capture mode is software controlled */
              
                      #if (Timer_SoftwareTriggerMode)
                          #if (!Timer_UDB_CONTROL_REG_REMOVED)
                              if (0u == (Timer_CONTROL & Timer__B_TIMER__TM_SOFTWARE))
                              {
                                  Timer_SetTriggerMode(Timer_INIT_TRIGGER_MODE);
                              }
                          #endif /* (!Timer_UDB_CONTROL_REG_REMOVED) */
                      #endif /* Set trigger mode for UDB Implementation if trigger mode is software controlled */
              
                      /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
                      /* Enter Critical Region*/
                      Timer_interruptState = CyEnterCriticalSection();
              
                      /* Use the interrupt output of the status register for IRQ output */
                      Timer_STATUS_AUX_CTRL |= Timer_STATUS_ACTL_INT_EN_MASK;
              
                      /* Exit Critical Region*/
                      CyExitCriticalSection(Timer_interruptState);
              
                      #if (Timer_EnableTriggerMode)
                          Timer_EnableTrigger();
                      #endif /* Set Trigger enable bit for UDB implementation in the control register*/
                              
                              
                      #if (Timer_InterruptOnCaptureCount && !Timer_UDB_CONTROL_REG_REMOVED)
                          Timer_SetInterruptCount(Timer_INIT_INT_CAPTURE_COUNT);
                      #endif /* Set interrupt count in UDB implementation if interrupt count feature is checked.*/
              
                      Timer_ClearFIFO();
                  #endif /* Configure additional features of UDB implementation */
 161   1      
 162   1          Timer_SetInterruptMode(Timer_INIT_INTERRUPT_MODE);
 163   1      }
 164          
 165          
 166          /*******************************************************************************
 167          * Function Name: Timer_Enable
 168          ********************************************************************************
 169          *
 170          * Summary:
 171          *  Enable the Timer
 172          *
 173          * Parameters:
 174          *  void
 175          *
 176          * Return:
 177          *  void
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 4   

 178          *
 179          *******************************************************************************/
 180          void Timer_Enable(void) 
 181          {
 182   1          /* Globally Enable the Fixed Function Block chosen */
 183   1          #if (Timer_UsingFixedFunction)
 184   1              Timer_GLOBAL_ENABLE |= Timer_BLOCK_EN_MASK;
 185   1              Timer_GLOBAL_STBY_ENABLE |= Timer_BLOCK_STBY_EN_MASK;
 186   1          #endif /* Set Enable bit for enabling Fixed function timer*/
 187   1      
 188   1          /* Remove assignment if control register is removed */
 189   1          #if (!Timer_UDB_CONTROL_REG_REMOVED || Timer_UsingFixedFunction)
 190   1              Timer_CONTROL |= Timer_CTRL_ENABLE;
 191   1          #endif /* Remove assignment if control register is removed */
 192   1      }
 193          
 194          
 195          /*******************************************************************************
 196          * Function Name: Timer_Start
 197          ********************************************************************************
 198          *
 199          * Summary:
 200          *  The start function initializes the timer with the default values, the
 201          *  enables the timerto begin counting.  It does not enable interrupts,
 202          *  the EnableInt command should be called if interrupt generation is required.
 203          *
 204          * Parameters:
 205          *  void
 206          *
 207          * Return:
 208          *  void
 209          *
 210          * Global variables:
 211          *  Timer_initVar: Is modified when this function is called for the
 212          *   first time. Is used to ensure that initialization happens only once.
 213          *
 214          *******************************************************************************/
 215          void Timer_Start(void) 
 216          {
 217   1          if(Timer_initVar == 0u)
 218   1          {
 219   2              Timer_Init();
 220   2      
 221   2              Timer_initVar = 1u;   /* Clear this bit for Initialization */
 222   2          }
 223   1      
 224   1          /* Enable the Timer */
 225   1          Timer_Enable();
 226   1      }
 227          
 228          
 229          /*******************************************************************************
 230          * Function Name: Timer_Stop
 231          ********************************************************************************
 232          *
 233          * Summary:
 234          *  The stop function halts the timer, but does not change any modes or disable
 235          *  interrupts.
 236          *
 237          * Parameters:
 238          *  void
 239          *
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 5   

 240          * Return:
 241          *  void
 242          *
 243          * Side Effects: If the Enable mode is set to Hardware only then this function
 244          *               has no effect on the operation of the timer.
 245          *
 246          *******************************************************************************/
 247          void Timer_Stop(void) 
 248          {
 249   1          /* Disable Timer */
 250   1          #if(!Timer_UDB_CONTROL_REG_REMOVED || Timer_UsingFixedFunction)
 251   1              Timer_CONTROL &= ((uint8)(~Timer_CTRL_ENABLE));
 252   1          #endif /* Remove assignment if control register is removed */
 253   1      
 254   1          /* Globally disable the Fixed Function Block chosen */
 255   1          #if (Timer_UsingFixedFunction)
 256   1              Timer_GLOBAL_ENABLE &= ((uint8)(~Timer_BLOCK_EN_MASK));
 257   1              Timer_GLOBAL_STBY_ENABLE &= ((uint8)(~Timer_BLOCK_STBY_EN_MASK));
 258   1          #endif /* Disable global enable for the Timer Fixed function block to stop the Timer*/
 259   1      }
 260          
 261          
 262          /*******************************************************************************
 263          * Function Name: Timer_SetInterruptMode
 264          ********************************************************************************
 265          *
 266          * Summary:
 267          *  This function selects which of the interrupt inputs may cause an interrupt.
 268          *  The twosources are caputure and terminal.  One, both or neither may
 269          *  be selected.
 270          *
 271          * Parameters:
 272          *  interruptMode:   This parameter is used to enable interrups on either/or
 273          *                   terminal count or capture.
 274          *
 275          * Return:
 276          *  void
 277          *
 278          *******************************************************************************/
 279          void Timer_SetInterruptMode(uint8 interruptMode) 
 280          {
 281   1          Timer_STATUS_MASK = interruptMode;
 282   1      }
 283          
 284          
 285          /*******************************************************************************
 286          * Function Name: Timer_SoftwareCapture
 287          ********************************************************************************
 288          *
 289          * Summary:
 290          *  This function forces a capture independent of the capture signal.
 291          *
 292          * Parameters:
 293          *  void
 294          *
 295          * Return:
 296          *  void
 297          *
 298          * Side Effects:
 299          *  An existing hardware capture could be overwritten.
 300          *
 301          *******************************************************************************/
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 6   

 302          void Timer_SoftwareCapture(void) 
 303          {
 304   1          /* Generate a software capture by reading the counter register */
 305   1          (void)Timer_COUNTER_LSB;
 306   1          /* Capture Data is now in the FIFO */
 307   1      }
 308          
 309          
 310          /*******************************************************************************
 311          * Function Name: Timer_ReadStatusRegister
 312          ********************************************************************************
 313          *
 314          * Summary:
 315          *  Reads the status register and returns it's state. This function should use
 316          *  defined types for the bit-field information as the bits in this register may
 317          *  be permuteable.
 318          *
 319          * Parameters:
 320          *  void
 321          *
 322          * Return:
 323          *  The contents of the status register
 324          *
 325          * Side Effects:
 326          *  Status register bits may be clear on read.
 327          *
 328          *******************************************************************************/
 329          uint8   Timer_ReadStatusRegister(void) 
 330          {
 331   1          return (Timer_STATUS);
 332   1      }
 333          
 334          
 335          #if (!Timer_UDB_CONTROL_REG_REMOVED) /* Remove API if control register is unused */
 336          
 337          
 338          /*******************************************************************************
 339          * Function Name: Timer_ReadControlRegister
 340          ********************************************************************************
 341          *
 342          * Summary:
 343          *  Reads the control register and returns it's value.
 344          *
 345          * Parameters:
 346          *  void
 347          *
 348          * Return:
 349          *  The contents of the control register
 350          *
 351          *******************************************************************************/
 352          uint8 Timer_ReadControlRegister(void) 
 353          {
 354   1          #if (!Timer_UDB_CONTROL_REG_REMOVED) 
 355   1              return ((uint8)Timer_CONTROL);
 356   1          #else
                      return (0);
                  #endif /* (!Timer_UDB_CONTROL_REG_REMOVED) */
 359   1      }
 360          
 361          
 362          /*******************************************************************************
 363          * Function Name: Timer_WriteControlRegister
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 7   

 364          ********************************************************************************
 365          *
 366          * Summary:
 367          *  Sets the bit-field of the control register.
 368          *
 369          * Parameters:
 370          *  control: The contents of the control register
 371          *
 372          * Return:
 373          *
 374          *******************************************************************************/
 375          void Timer_WriteControlRegister(uint8 control) 
 376          {
 377   1          #if (!Timer_UDB_CONTROL_REG_REMOVED) 
 378   1              Timer_CONTROL = control;
 379   1          #else
                      control = 0u;
                  #endif /* (!Timer_UDB_CONTROL_REG_REMOVED) */
 382   1      }
 383          
 384          #endif /* Remove API if control register is unused */
 385          
 386          
 387          /*******************************************************************************
 388          * Function Name: Timer_ReadPeriod
 389          ********************************************************************************
 390          *
 391          * Summary:
 392          *  This function returns the current value of the Period.
 393          *
 394          * Parameters:
 395          *  void
 396          *
 397          * Return:
 398          *  The present value of the counter.
 399          *
 400          *******************************************************************************/
 401          uint16 Timer_ReadPeriod(void) 
 402          {
 403   1         #if(Timer_UsingFixedFunction)
 404   1             return ((uint16)CY_GET_REG16(Timer_PERIOD_LSB_PTR));
 405   1         #else
                     return (CY_GET_REG16(Timer_PERIOD_LSB_PTR));
                 #endif /* (Timer_UsingFixedFunction) */
 408   1      }
 409          
 410          
 411          /*******************************************************************************
 412          * Function Name: Timer_WritePeriod
 413          ********************************************************************************
 414          *
 415          * Summary:
 416          *  This function is used to change the period of the counter.  The new period
 417          *  will be loaded the next time terminal count is detected.
 418          *
 419          * Parameters:
 420          *  period: This value may be between 1 and (2^Resolution)-1.  A value of 0 will
 421          *          result in the counter remaining at zero.
 422          *
 423          * Return:
 424          *  void
 425          *
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 8   

 426          *******************************************************************************/
 427          void Timer_WritePeriod(uint16 period) 
 428          {
 429   1          #if(Timer_UsingFixedFunction)
 430   1              uint16 period_temp = (uint16)period;
 431   1              CY_SET_REG16(Timer_PERIOD_LSB_PTR, period_temp);
 432   1          #else
                      CY_SET_REG16(Timer_PERIOD_LSB_PTR, period);
                  #endif /*Write Period value with appropriate resolution suffix depending on UDB or fixed function impl
             -ementation */
 435   1      }
 436          
 437          
 438          /*******************************************************************************
 439          * Function Name: Timer_ReadCapture
 440          ********************************************************************************
 441          *
 442          * Summary:
 443          *  This function returns the last value captured.
 444          *
 445          * Parameters:
 446          *  void
 447          *
 448          * Return:
 449          *  Present Capture value.
 450          *
 451          *******************************************************************************/
 452          uint16 Timer_ReadCapture(void) 
 453          {
 454   1         #if(Timer_UsingFixedFunction)
 455   1             return ((uint16)CY_GET_REG16(Timer_CAPTURE_LSB_PTR));
 456   1         #else
                     return (CY_GET_REG16(Timer_CAPTURE_LSB_PTR));
                 #endif /* (Timer_UsingFixedFunction) */
 459   1      }
 460          
 461          
 462          /*******************************************************************************
 463          * Function Name: Timer_WriteCounter
 464          ********************************************************************************
 465          *
 466          * Summary:
 467          *  This funtion is used to set the counter to a specific value
 468          *
 469          * Parameters:
 470          *  counter:  New counter value.
 471          *
 472          * Return:
 473          *  void
 474          *
 475          *******************************************************************************/
 476          void Timer_WriteCounter(uint16 counter) 
 477          {
 478   1         #if(Timer_UsingFixedFunction)
 479   1              /* This functionality is removed until a FixedFunction HW update to
 480   1               * allow this register to be written
 481   1               */
 482   1              CY_SET_REG16(Timer_COUNTER_LSB_PTR, (uint16)counter);
 483   1              
 484   1          #else
                      CY_SET_REG16(Timer_COUNTER_LSB_PTR, counter);
                  #endif /* Set Write Counter only for the UDB implementation (Write Counter not available in fixed func
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 9   

             -tion Timer */
 487   1      }
 488          
 489          
 490          /*******************************************************************************
 491          * Function Name: Timer_ReadCounter
 492          ********************************************************************************
 493          *
 494          * Summary:
 495          *  This function returns the current counter value.
 496          *
 497          * Parameters:
 498          *  void
 499          *
 500          * Return:
 501          *  Present compare value.
 502          *
 503          *******************************************************************************/
 504          uint16 Timer_ReadCounter(void) 
 505          {
 506   1          /* Force capture by reading Accumulator */
 507   1          /* Must first do a software capture to be able to read the counter */
 508   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 509   1          #if(Timer_UsingFixedFunction)
 510   1              (void)CY_GET_REG16(Timer_COUNTER_LSB_PTR);
 511   1          #else
                      (void)CY_GET_REG8(Timer_COUNTER_LSB_PTR_8BIT);
                  #endif/* (Timer_UsingFixedFunction) */
 514   1      
 515   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 516   1          #if(Timer_UsingFixedFunction)
 517   1              return ((uint16)CY_GET_REG16(Timer_CAPTURE_LSB_PTR));
 518   1          #else
                      return (CY_GET_REG16(Timer_CAPTURE_LSB_PTR));
                  #endif /* (Timer_UsingFixedFunction) */
 521   1      }
 522          
 523          
 524          #if(!Timer_UsingFixedFunction) /* UDB Specific Functions */
              
                  
              /*******************************************************************************
               * The functions below this point are only available using the UDB
               * implementation.  If a feature is selected, then the API is enabled.
               ******************************************************************************/
              
              
              #if (Timer_SoftwareCaptureMode)
              
              
              /*******************************************************************************
              * Function Name: Timer_SetCaptureMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture mode to either rising or falling edge.
              *
              * Parameters:
              *  captureMode: This parameter sets the capture mode of the UDB capture feature
              *  The parameter values are defined using the
              *  #define Timer__B_TIMER__CM_NONE 0
              #define Timer__B_TIMER__CM_RISINGEDGE 1
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 10  

              #define Timer__B_TIMER__CM_FALLINGEDGE 2
              #define Timer__B_TIMER__CM_EITHEREDGE 3
              #define Timer__B_TIMER__CM_SOFTWARE 4
               identifiers
              *  The following are the possible values of the parameter
              *  Timer__B_TIMER__CM_NONE        - Set Capture mode to None
              *  Timer__B_TIMER__CM_RISINGEDGE  - Rising edge of Capture input
              *  Timer__B_TIMER__CM_FALLINGEDGE - Falling edge of Capture input
              *  Timer__B_TIMER__CM_EITHEREDGE  - Either edge of Capture input
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_SetCaptureMode(uint8 captureMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  captureMode = ((uint8)((uint8)captureMode << Timer_CTRL_CAP_MODE_SHIFT));
                  captureMode &= (Timer_CTRL_CAP_MODE_MASK);
              
                  #if (!Timer_UDB_CONTROL_REG_REMOVED)
                      /* Clear the Current Setting */
                      Timer_CONTROL &= ((uint8)(~Timer_CTRL_CAP_MODE_MASK));
              
                      /* Write The New Setting */
                      Timer_CONTROL |= captureMode;
                  #endif /* (!Timer_UDB_CONTROL_REG_REMOVED) */
              }
              #endif /* Remove API if Capture Mode is not Software Controlled */
              
              
              #if (Timer_SoftwareTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: Timer_SetTriggerMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the trigger input mode
              *
              * Parameters:
              *  triggerMode: Pass one of the pre-defined Trigger Modes (except Software)
                  #define Timer__B_TIMER__TM_NONE 0x00u
                  #define Timer__B_TIMER__TM_RISINGEDGE 0x04u
                  #define Timer__B_TIMER__TM_FALLINGEDGE 0x08u
                  #define Timer__B_TIMER__TM_EITHEREDGE 0x0Cu
                  #define Timer__B_TIMER__TM_SOFTWARE 0x10u
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_SetTriggerMode(uint8 triggerMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  triggerMode &= Timer_CTRL_TRIG_MODE_MASK;
              
                  #if (!Timer_UDB_CONTROL_REG_REMOVED)   /* Remove assignment if control register is removed */
                  
                      /* Clear the Current Setting */
                      Timer_CONTROL &= ((uint8)(~Timer_CTRL_TRIG_MODE_MASK));
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 11  

              
                      /* Write The New Setting */
                      Timer_CONTROL |= (triggerMode | Timer__B_TIMER__TM_SOFTWARE);
                  #endif /* Remove code section if control register is not used */
              }
              #endif /* Remove API if Trigger Mode is not Software Controlled */
              
              #if (Timer_EnableTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: Timer_EnableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Sets the control bit enabling Hardware Trigger mode
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_EnableTrigger(void) 
              {
                  #if (!Timer_UDB_CONTROL_REG_REMOVED)   /* Remove assignment if control register is removed */
                      Timer_CONTROL |= Timer_CTRL_TRIG_EN;
                  #endif /* Remove code section if control register is not used */
              }
              
              
              /*******************************************************************************
              * Function Name: Timer_DisableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Clears the control bit enabling Hardware Trigger mode
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_DisableTrigger(void) 
              {
                  #if (!Timer_UDB_CONTROL_REG_REMOVED )   /* Remove assignment if control register is removed */
                      Timer_CONTROL &= ((uint8)(~Timer_CTRL_TRIG_EN));
                  #endif /* Remove code section if control register is not used */
              }
              #endif /* Remove API is Trigger Mode is set to None */
              
              #if(Timer_InterruptOnCaptureCount)
              
              
              /*******************************************************************************
              * Function Name: Timer_SetInterruptCount
              ********************************************************************************
              *
              * Summary:
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 12  

              *  This function sets the capture count before an interrupt is triggered.
              *
              * Parameters:
              *  interruptCount:  A value between 0 and 3 is valid.  If the value is 0, then
              *                   an interrupt will occur each time a capture occurs.
              *                   A value of 1 to 3 will cause the interrupt
              *                   to delay by the same number of captures.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_SetInterruptCount(uint8 interruptCount) 
              {
                  /* This must only set to two bits of the control register associated */
                  interruptCount &= Timer_CTRL_INTCNT_MASK;
              
                  #if (!Timer_UDB_CONTROL_REG_REMOVED)
                      /* Clear the Current Setting */
                      Timer_CONTROL &= ((uint8)(~Timer_CTRL_INTCNT_MASK));
                      /* Write The New Setting */
                      Timer_CONTROL |= interruptCount;
                  #endif /* (!Timer_UDB_CONTROL_REG_REMOVED) */
              }
              #endif /* Timer_InterruptOnCaptureCount */
              
              
              #if (Timer_UsingHWCaptureCounter)
              
              
              /*******************************************************************************
              * Function Name: Timer_SetCaptureCount
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture count
              *
              * Parameters:
              *  captureCount: A value between 2 and 127 inclusive is valid.  A value of 1
              *                to 127 will cause the interrupt to delay by the same number of
              *                captures.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_SetCaptureCount(uint8 captureCount) 
              {
                  Timer_CAP_COUNT = captureCount;
              }
              
              
              /*******************************************************************************
              * Function Name: Timer_ReadCaptureCount
              ********************************************************************************
              *
              * Summary:
              *  This function reads the capture count setting
              *
              * Parameters:
              *  void
              *
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 13  

              * Return:
              *  Returns the Capture Count Setting
              *
              *******************************************************************************/
              uint8 Timer_ReadCaptureCount(void) 
              {
                  return ((uint8)Timer_CAP_COUNT);
              }
              #endif /* Timer_UsingHWCaptureCounter */
              
              
              /*******************************************************************************
              * Function Name: Timer_ClearFIFO
              ********************************************************************************
              *
              * Summary:
              *  This function clears all capture data from the capture FIFO
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Timer_ClearFIFO(void) 
              {
                  while(0u != (Timer_ReadStatusRegister() & Timer_STATUS_FIFONEMP))
                  {
                      (void)Timer_ReadCapture();
                  }
              }
              
              #endif /* UDB Specific Functions */
 768          
 769          
 770          /* [] END OF FILE */
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Timer_Init (BEGIN)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 52
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
000B 904F02            MOV     DPTR,#04F02H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FC              ANL     A,#0FCH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0016 904F0B            MOV     DPTR,#04F0BH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54CF              ANL     A,#0CFH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0021 904F0B            MOV     DPTR,#04F0BH
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 4430              ORL     A,#030H
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
002C 904F0B            MOV     DPTR,#04F0BH
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54F0              ANL     A,#0F0H
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0037 904F0B            MOV     DPTR,#04F0BH
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 440F              ORL     A,#0FH
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0042 904F01            MOV     DPTR,#04F01H
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 15  

0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 4401              ORL     A,#01H
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
004D 7FBF              MOV     R7,#0BFH
004F 7E5D              MOV     R6,#05DH
0051 120000      R     LCALL   _Timer_WritePeriod
                                           ; SOURCE LINE # 119
0054 7FBF              MOV     R7,#0BFH
0056 7E5D              MOV     R6,#05DH
0058 120000      R     LCALL   _Timer_WriteCounter
                                           ; SOURCE LINE # 162
005B 7F00              MOV     R7,#00H
005D 120000      R     LCALL   _Timer_SetInterruptMode
                                           ; SOURCE LINE # 163
0060 22                RET     
             ; FUNCTION Timer_Init (END)

             ; FUNCTION Timer_Enable (BEGIN)
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 184
0000 9043A3            MOV     DPTR,#043A3H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
000B 9043B3            MOV     DPTR,#043B3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
0016 904F00            MOV     DPTR,#04F00H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
0021 22                RET     
             ; FUNCTION Timer_Enable (END)

             ; FUNCTION Timer_Start (BEGIN)
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
0000 900000      R     MOV     DPTR,#Timer_initVar
0003 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 16  

0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0008 120000      R     LCALL   Timer_Init
                                           ; SOURCE LINE # 221
000B 900000      R     MOV     DPTR,#Timer_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
0011         ?C0003:
                                           ; SOURCE LINE # 225
0011 120000      R     LCALL   Timer_Enable
                                           ; SOURCE LINE # 226
0014 22                RET     
             ; FUNCTION Timer_Start (END)

             ; FUNCTION Timer_Stop (BEGIN)
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 251
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
000B 9043A3            MOV     DPTR,#043A3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
0016 9043B3            MOV     DPTR,#043B3H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FE              ANL     A,#0FEH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0021 22                RET     
             ; FUNCTION Timer_Stop (END)

             ; FUNCTION _Timer_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 279
0000 900000      R     MOV     DPTR,#interruptMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0005 900000      R     MOV     DPTR,#interruptMode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 17  

000A 904F03            MOV     DPTR,#04F03H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
000F 22                RET     
             ; FUNCTION _Timer_SetInterruptMode (END)

             ; FUNCTION Timer_SoftwareCapture (BEGIN)
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 305
0000 904F06            MOV     DPTR,#04F06H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 307
0008 22                RET     
             ; FUNCTION Timer_SoftwareCapture (END)

             ; FUNCTION Timer_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
0000 904F03            MOV     DPTR,#04F03H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 332
0005         ?C0008:
0005 22                RET     
             ; FUNCTION Timer_ReadStatusRegister (END)

             ; FUNCTION Timer_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 355
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 359
0005         ?C0009:
0005 22                RET     
             ; FUNCTION Timer_ReadControlRegister (END)

             ; FUNCTION _Timer_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 375
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 378
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904F00            MOV     DPTR,#04F00H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
000F 22                RET     
             ; FUNCTION _Timer_WriteControlRegister (END)

C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 18  

             ; FUNCTION Timer_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 404
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7904              MOV     R1,#04H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 408
0009         ?C0011:
0009 22                RET     
             ; FUNCTION Timer_ReadPeriod (END)

             ; FUNCTION _Timer_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 427
0000 900000      R     MOV     DPTR,#period
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 430
0008 900000      R     MOV     DPTR,#period
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#period_temp
0013 EE                MOV     A,R6
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
0018 7B02              MOV     R3,#02H
001A 7A4F              MOV     R2,#04FH
001C 7904              MOV     R1,#04H
001E 900000      R     MOV     DPTR,#period_temp
0021 E0                MOVX    A,@DPTR
0022 FC                MOV     R4,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 435
0029 22                RET     
             ; FUNCTION _Timer_WritePeriod (END)

             ; FUNCTION Timer_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 455
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7908              MOV     R1,#08H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 459
0009         ?C0013:
0009 22                RET     
             ; FUNCTION Timer_ReadCapture (END)
C51 COMPILER V9.51   TIMER                                                                 07/23/2015 11:21:32 PAGE 19  


             ; FUNCTION _Timer_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 476
0000 900000      R     MOV     DPTR,#counter
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 482
0008 7B02              MOV     R3,#02H
000A 7A4F              MOV     R2,#04FH
000C 7906              MOV     R1,#06H
000E 900000      R     MOV     DPTR,#counter
0011 E0                MOVX    A,@DPTR
0012 FC                MOV     R4,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 487
0019 22                RET     
             ; FUNCTION _Timer_WriteCounter (END)

             ; FUNCTION Timer_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 510
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7906              MOV     R1,#06H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 517
0009 7B02              MOV     R3,#02H
000B 7A4F              MOV     R2,#04FH
000D 7908              MOV     R1,#08H
000F 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 521
0012         ?C0015:
0012 22                RET     
             ; FUNCTION Timer_ReadCounter (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    346    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
